{"_attachments":{"js/phonegap.0.9.5.1.js":{"data":"","content_type":"application/javascript","revpos":42},"js/jquery.couch.js":{"data":"","content_type":"application/javascript","revpos":42},"js/jquery-1.6.1.min.js":{"data":"","content_type":"application/javascript","revpos":42},"js/phonegap.0.9.5.1.min.js":{"data":"","content_type":"application/javascript","revpos":42},"js/underscore-1.1.6.js":{"data":"","content_type":"application/javascript","revpos":42},"index.html":{"data":"PCFET0NUWVBFIEhUTUwgUFVCTElDICItLy9XM0MvL0RURCBIVE1MIDQuMDEvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQvc3RyaWN0LmR0ZCI+CjxodG1sPgogIDxoZWFkPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9MS4wLCB1c2VyLXNjYWxhYmxlPW5vOyIgLz4KCiAgICA8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LXR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD11dGYtOCI+CgoKCTwhLS0gaVBhZC9pUGhvbmUgc3BlY2lmaWMgY3NzIGJlbG93LCBhZGQgYWZ0ZXIgeW91ciBtYWluIGNzcyA+Cgk8bGluayByZWw9InN0eWxlc2hlZXQiIG1lZGlhPSJvbmx5IHNjcmVlbiBhbmQgKG1heC1kZXZpY2Utd2lkdGg6IDEwMjRweCkiIGhyZWY9ImlwYWQuY3NzIiB0eXBlPSJ0ZXh0L2NzcyIgLz4JCQoJPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBtZWRpYT0ib25seSBzY3JlZW4gYW5kIChtYXgtZGV2aWNlLXdpZHRoOiA0ODBweCkiIGhyZWY9ImlwaG9uZS5jc3MiIHR5cGU9InRleHQvY3NzIiAvPgkJCgktLT4KCTwhLS0gSWYgeW91IGFwcGxpY2F0aW9uIGlzIHRhcmdldGluZyBpT1MgQkVGT1JFIDQuMCB5b3UgTVVTVCBwdXQganNvbjIuanMgZnJvbSBodHRwOi8vd3d3LkpTT04ub3JnL2pzb24yLmpzIGludG8geW91ciB3d3cgZGlyZWN0b3J5IGFuZCBpbmNsdWRlIGl0IGhlcmUgLS0+Cgk8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgY2hhcnNldD0idXRmLTgiIHNyYz0ianMvanF1ZXJ5LTEuNi4xLm1pbi5qcyI+PC9zY3JpcHQ+Cgk8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgY2hhcnNldD0idXRmLTgiIHNyYz0ianMvanF1ZXJ5LmNvdWNoLmpzIj48L3NjcmlwdD4KCTxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBjaGFyc2V0PSJ1dGYtOCIgc3JjPSJqcy9waG9uZWdhcC4wLjkuNS4xLm1pbi5qcyI+PC9zY3JpcHQ+Cgk8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgY2hhcnNldD0idXRmLTgiIHNyYz0ianMvdW5kZXJzY29yZS0xLjEuNi5qcyI+PC9zY3JpcHQ+CiAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGNoYXJzZXQ9InV0Zi04Ij4KCgoJLy8gSWYgeW91IHdhbnQgdG8gcHJldmVudCBkcmFnZ2luZywgdW5jb21tZW50IHRoaXMgc2VjdGlvbgoJLyoKCWZ1bmN0aW9uIHByZXZlbnRCZWhhdmlvcihlKSAKCXsgCiAgICAgIGUucHJldmVudERlZmF1bHQoKTsgCiAgICB9OwoJZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigidG91Y2htb3ZlIiwgcHJldmVudEJlaGF2aW9yLCBmYWxzZSk7CgkqLwoJCgkvKiBJZiB5b3UgYXJlIHN1cHBvcnRpbmcgeW91ciBvd24gcHJvdG9jb2wsIHRoZSB2YXIgaW52b2tlU3RyaW5nIHdpbGwgY29udGFpbiBhbnkgYXJndW1lbnRzIHRvIHRoZSBhcHAgbGF1bmNoLgoJc2VlIGh0dHA6Ly9pcGhvbmVkZXZlbG9wZXJ0aXBzLmNvbS9jb2NvYS9sYXVuY2hpbmcteW91ci1vd24tYXBwbGljYXRpb24tdmlhLWEtY3VzdG9tLXVybC1zY2hlbWUuaHRtbAoJZm9yIG1vcmUgZGV0YWlscyAtam0gKi8KCS8qCglmdW5jdGlvbiBoYW5kbGVPcGVuVVJMKHVybCkKCXsKCQkvLyBUT0RPOiBkbyBzb21ldGhpbmcgd2l0aCB0aGUgdXJsIHBhc3NlZCBpbi4KCX0KCSovCgkKCQoJCglmdW5jdGlvbiBvbkJvZHlMb2FkKCkKCXsJCiAgICB2YXIgdmFsaWRhdGVEb2N1bWVudHNFeGlzdCA9IGZ1bmN0aW9uKGRhdGFiYXNlX25hbWUsIGRvY3VtZW50X25hbWVzKSB7CiAgICAgIHZhciBkYXRhYmFzZTsKICAgICAgZGF0YWJhc2UgPSAkLmNvdWNoLmRiKGRhdGFiYXNlX25hbWUpOwogICAgICByZXR1cm4gZGF0YWJhc2UuYWxsRG9jcyh7CiAgICAgICAga2V5czogZG9jdW1lbnRfbmFtZXMsCiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZG9jcykgewogICAgICAgICAgdmFyIGFsbF9kYXRhYmFzZV9kb2N1bWVudF9uYW1lczsKICAgICAgICAgIGFsbF9kYXRhYmFzZV9kb2N1bWVudF9uYW1lcyA9IF8ubWFwKGRvY3Mucm93cywgZnVuY3Rpb24oZG9jdW1lbnQpIHsKICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmlkOwogICAgICAgICAgfSk7CiAgICAgICAgICByZXR1cm4gXy5lYWNoKGRvY3VtZW50X25hbWVzLCBmdW5jdGlvbihkb2N1bWVudF9uYW1lKSB7CiAgICAgICAgICAgIGlmICghXy5pbmNsdWRlKGFsbF9kYXRhYmFzZV9kb2N1bWVudF9uYW1lcywgZG9jdW1lbnRfbmFtZSkpIHsKICAgICAgICAgICAgICByZXR1cm4gYWxlcnQoIkZhaWxlZCB0byBmaW5kIHRoZSBkb2N1bWVudDogIiArIGRvY3VtZW50X25hbWUgKyAiIGluIGRhdGFiYXNlOiAiICsgZGF0YWJhc2VfbmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKCkgewogICAgICAgICAgcmV0dXJuIGFsZXJ0KCJGYWlsZWQgdG8gZ2V0IHRoZSBkb2N1bWVudHMgZm9yIGRhdGFiYXNlOiAiICsgZGF0YWJhc2VfbmFtZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH07CgogICAgLy8gTk9URTogcnVubmluZyBmcm9tIHRoZSBmaWxlc3lzdGVtIGdpdmVzIGFuICJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4iIGVycm9yIAoJICBpZih3aW5kb3cubG9jYXRpb24uaG9zdCl7CgoJICAgIC8vIGlmIHRoZSBkYXRhIGlzbid0IHJldHVybmVkIHNvb24sIGdpdmUgYSBtZXNzYWdlCgkgICAgdmFyIGRhdGFfcmV0cmlldmVkID0gZmFsc2U7CgkJCXNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CgkJCSAgaWYoIWRhdGFfcmV0cmlldmVkKQogICAgCQkgICQoImgxI2xvYWRlZF9tZXNzYWdlIikuaHRtbCgiQ291Y2hBcHAgZmFpbGVkIHRvIGdldCBkYXRhIik7CgkJCX0sIDMwMDAgKTsKCiAgICAgICQuY291Y2gudXJsUHJlZml4ID0gd2luZG93LmxvY2F0aW9uLmhvc3Q/ICJodHRwOi8vIiArIHdpbmRvdy5sb2NhdGlvbi5ob3N0IDogImh0dHA6Ly8xMjcuMC4wLjE6NTk4NCI7CiAgICAgIAogICAgICAvLyBmb3IgZGVidWdnaW5nCgkgICAgdmFsaWRhdGVEb2N1bWVudHNFeGlzdCgibXljb3VjaGFwcF9kYiIsIFsiX2Rlc2lnbi9teWNvdWNoYXBwIiwgIm15ZGF0YSIsICJfZGVzaWduL215ZGF0YV92aWV3cyJdKTsKCiAgICAgIC8vIHRoaXMgZXhhbXBsZSBpcyBvdmVyLWVuZ2luZWVyZWQsIGJ1dCBpdCBpcyBtZWFudCB0byBzaG93IHRoYXQgZGF0YSBhbmQgdmlld3MgY2FuIGJlIGxvYWRlZCBpbnRvIGEgY291Y2hkYgogICAgICAkLmNvdWNoLmRiKCJteWNvdWNoYXBwX2RiIikudmlldygibXlkYXRhX3ZpZXdzL21lc3NhZ2U/a2V5PVwibXlkYXRhXCIiLCB7IHN1Y2Nlc3M6IGZ1bmN0aW9uKHZpZXdfZGF0YSkgeyAgCiAgICAgICAgZGF0YV9yZXRyaWV2ZWQgPSB0cnVlOwogICAgICAgICAgICAgJCgiaDEjbG9hZGVkX21lc3NhZ2UiKS5odG1sKHZpZXdfZGF0YS5yb3dzWzBdLnZhbHVlKTsKICAgICAgfX0pOwoJICB9CgoJICAvLyBpdCBpcyBydW5uaW5nIGZyb20gdGhlIGZpbGVzeXN0ZW0KCSAgZWxzZQogIAkJJCgiaDEjbG9hZGVkX21lc3NhZ2UiKS5odG1sKCJXYXJuaW5nOiBDb3VjaEFwcCBzYW1wbGUgcnVubmluZyBsb2NhbGx5IHNvIHdpbGwgcmVjZWl2ZSAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJyBlcnJvciIpOwoKCQlkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJkZXZpY2VyZWFkeSIsb25EZXZpY2VSZWFkeSxmYWxzZSk7Cgl9CgkKCS8qIFdoZW4gdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQsIFBob25lR2FwIGhhcyBiZWVuIGluaXRpYWxpemVkIGFuZCBpcyByZWFkeSB0byByb2xsICovCgkvKiBJZiB5b3UgYXJlIHN1cHBvcnRpbmcgeW91ciBvd24gcHJvdG9jb2wsIHRoZSB2YXIgaW52b2tlU3RyaW5nIHdpbGwgY29udGFpbiBhbnkgYXJndW1lbnRzIHRvIHRoZSBhcHAgbGF1bmNoLgoJc2VlIGh0dHA6Ly9pcGhvbmVkZXZlbG9wZXJ0aXBzLmNvbS9jb2NvYS9sYXVuY2hpbmcteW91ci1vd24tYXBwbGljYXRpb24tdmlhLWEtY3VzdG9tLXVybC1zY2hlbWUuaHRtbAoJZm9yIG1vcmUgZGV0YWlscyAtam0gKi8KCWZ1bmN0aW9uIG9uRGV2aWNlUmVhZHkoKQoJewoJfQogICAgCiAgICA8L3NjcmlwdD4KICA8L2hlYWQ+CiAgPGJvZHkgb25sb2FkPSJvbkJvZHlMb2FkKCkiPgogIAkgIDxoMSBpZD0ibG9hZGVkX21lc3NhZ2UiPjwvaDE+CiAgPC9ib2R5Pgo8L2h0bWw+Cg==","content_type":"text/html","revpos":42}}}